TUT:Simple Application
简单的应用：
Jump to: navigation, search

Here we discuss how to write a simple application. It's only purpose is to retrieve the value of a variable from a remote host.
这里我们讨论怎样些一个简单的应用。他只想获取远程服务器的一个值。


Here are the files discussed in this example so you can download them:
File 	Description
Makefile 			A simple makefile used to build the projects 一个简单的make文件，用于生成我们的工程
NET-SNMP-TUTORIAL-MIB.txt 	The MIB we'll be writing code for in the various pieces of the agent extension tutorial 这是mib库，我们将为各种agent的扩展的教程写代码。
snmpdemoapp.c 			The C source code 这是C代码。

First, we must include some header files. After you've installed the net-snmp toolkit, some easy to use header files have been installed that handle most situations you'll run into. We start our snmpdemoapp.c file with these:
首先我们必须包含更多的头文件，之后我们我们要安装net－snmp的工具包，更多的时候将使用头文件进行函数的操作，我们将用以下两个头文件开始。
 #include <net-snmp/net-snmp-config.h>
 #include <net-snmp/net-snmp-includes.h>


Next, we'll set up some local definitions that you can toggle if you want to use SNMPv3 or SNMPv1. By default, we're setting up for SNMPv3 here (which is more complex, so make sure you've read about the SNMPv3 Options first. If you don't want to deal with SNMPv3 for now, turn the #define statement below to #undef.
下面我们启动更多本地定义的选择使用版本3和版本1的开关。默认方式，我们使用版本3。那个是很多的综合，这样做首先你要群信你阅读过关于版本三的选项，假如你现在不知道怎么处理snmpv3，那么请将下面#define的声明改为#undef。

 /* change the word "define" to "undef" to try the (insecure) SNMPv1 version */
 #define DEMO_USE_SNMP_VERSION_3
 
 #ifdef DEMO_USE_SNMP_VERSION_3
 #include "net-snmp/transform_oids.h"
 const char *our_v3_passphrase = "The Net-SNMP Demo Password";
 #endif


Next, we declare our main() routine and the variables we need:
再接下来，我们声明我们的mian函数，开始处理流程和我们需要的值。


 main() {


The first variables we need to declare:

    struct snmp_session: A structure that holds information about who we're going to be talking to. We need to declare 2 of these, one to fill with information, and second which is a pointer returned by the library. 

    struct snmp_pdu: This structure will hold all of the information that we're going to send to the remote host. We'll declare a second for the information that they are going to send back. 

    oid: An OID is going to hold the location of the information which we want to retrieve. It'll need a size as well. 

    struct variable_list: This will hold the variables that we want to manipulate via SNMP. 
首先这些变量需要声明：
	struct snmp_session：一个保持会话信息的结构体，我们需要声明两处，一个是填充信息，另一个是库函数返回的指针。
	struct snmp_pdu:这个结构体是保存所有发送给远程主机信息的，我们将第二个声明，为稍后的信息发送。
	oid: 一个保存本地取回的信息的，他需要很大的空间。
	struct variable_list:这个变量，我们通过snmp保存这个变量。

   struct snmp_session session, *ss;
   struct snmp_pdu *pdu;
   struct snmp_pdu *response;
           
   oid anOID[MAX_OID_LEN];
   size_t anOID_len = MAX_OID_LEN;
   
   struct variable_list *vars;
   int status;
   
Then, the first thing we must do is to inialize the snmp library: 
那么，我们首先要初始化一个snmp库。
   /*
    * Initialize the SNMP library
    */
   init_snmp("snmpapp");
   
Next, we'll inialize a session that describes who we want to talk to, what version of SNMP we want to use, how to authenticate to it, etc. A full definition of this session can be found in the net-snmp/snmp_api.h header file.

We've picked SNMPv3 by default above, which is a bit more complex to understand so make sure you've read 
接下来，我们初始化一个会话描述连接，我们将使用哪个版本，怎样去识别他，等等。这些全部会话的定义在net－snmp／snmp_api.h头文件里。
我们将选择上文默认，那个有些复杂的，确信你的读过的。

    /*
    * Initialize a "session" that defines who we're going to talk to
    */
   snmp_sess_init( &session );                   /* set up defaults */
   session.peername = "test.net-snmp.org";
   
   /* set up the authentication parameters for talking to the server */
   
   #ifdef DEMO_USE_SNMP_VERSION_3
   
   /* Use SNMPv3 to talk to the experimental server */
   
   /* set the SNMP version number */
   session.version=SNMP_VERSION_3;
        
   /* set the SNMPv3 user name */
   session.securityName = strdup("MD5User");
   session.securityNameLen = strlen(session.securityName);
   
   /* set the security level to authenticated, but not encrypted */
   session.securityLevel = SNMP_SEC_LEVEL_AUTHNOPRIV;
   
   /* set the authentication method to MD5 */
   session.securityAuthProto = usmHMACMD5AuthProtocol;
   session.securityAuthProtoLen = sizeof(usmHMACMD5AuthProtocol)/sizeof(oid);
   session.securityAuthKeyLen = USM_AUTH_KU_LEN;
    
   /* set the authentication key to a MD5 hashed version of our
      passphrase "The Net-SNMP Demo Password" (which must be at least 8
      characters long) */
   if (generate_Ku(session.securityAuthProto,
                   session.securityAuthProtoLen,
                   (u_char *) our_v3_passphrase, strlen(our_v3_passphrase),
                   session.securityAuthKey,
                   &session.securityAuthKeyLen) != SNMPERR_SUCCESS) {
       snmp_perror(argv[0]);
       snmp_log(LOG_ERR,
                "Error generating Ku from authentication pass phrase. \n");
       exit(1);
   }
   
   #else /* we'll use the insecure (but simplier) SNMPv1 */
   
   /* set the SNMP version number */
   session.version = SNMP_VERSION_1;
   
   /* set the SNMPv1 community name used for authentication */
   session.community = "demopublic";
   session.community_len = strlen(session.community);
   
   #endif /* SNMPv1 */


After we have established the session, we then need to open it. Opening it returns a pointer to another session that we should use for all our future calls:
在建立session之后，我们需要打开他，为了我们以后调用应该的使用的另一个session打开他。

   /* windows32 specific initialization (is a noop on unix) */
   SOCK_STARTUP;
   
   /*
    * Open the session
    */
   ss = snmp_open(&session);                     /* establish the session */

If the session failed to open properly, print an error message and exit:
假如这个session打开失败，打印一个错误信息并退出。

   if (!ss) {
       snmp_perror("ack");
       snmp_log(LOG_ERR, "something horrible happened!!!\n");
       exit(2);
   }

Next we create the PDU the we are going to send to the remote host when we request information. In this case, we're going to create a SNMP-GET pdu, which is what the snmpget program uses, for instance. It retrieves a value for each oid that you initalize it with. 
接下来我们创建一个向远程主机发送请求信息的PDU，既然这样，我们创建一个在实例多次被snmpget程序使用的snmp－get的pdu，他为每一个你他初始化的oid的值。

   /*
    * Create the PDU for the data for our request.
    *   1) We're going to GET the system.sysDescr.0 node.
    */
   pdu = snmp_pdu_create(SNMP_MSG_GET);

So, let's fill it with our requested oid. Let's get the system.sysDescr.0 variable for this example. There are numerious ways you could create the oid in question. You could put in the numerical unsigned integer values yourself into the anOID array we created above, or you could use one of the following function calls to do it. We recommend the first one (get_node), as it is the most powerful and accepts more types of OIDs. 
那么，让我们的oid请求填充他，获得例子system.sysDescr.0的值，很多的方法可以创建oid的询问，你可以设置一个无符号整形值到他自己到一个我们创建的oid数组里边。或者你可以使用以下函数调用，我们将记住第一个，成为很好的更好和访问更多的oid的节点。
   read_objid(".1.3.6.1.2.1.1.1.0", anOID, &anOID_len);
   
   #if OTHER_METHODS
   get_node("sysDescr.0", anOID, &anOID_len);
   read_objid("system.sysDescr.0", anOID, &anOID_len);
   #endif
   
So we add this oid, with a NULL value to the PDU using the following statement: (all oids should be paired with a NULL value for outgoing requests for information. For an SNMP-SET pdu, we'd put in the value we wanted to set the oid to).
我们添加一个oid，以一个空值声明。（全部的oid应该给发出信息的请求一一赋值为空，设置一个pdu，我们要给想设置的oid一个值得）
   snmp_add_null_var(pdu, anOID, anOID_len);

Finally, we can send out the request using the session pointer and the pdu and we get back a status and the response, which is stored in the newly malloced response pdu pointer.
最后，我们要使用sesseion指针、pdu发送请求和接受后续的响应状态，函数会将响应状态存储到一个新申请的空间并返回他的地址指针。
   /*
    * Send the Request out.
    */
   status = snmp_synch_response(ss, pdu, &response);

Now we can examine the information, assuming our request was fulfilled properly. If not, we'll print the error that caused the problem:
现在我们可以检查信息，承担我们的请求，将适当全部填充，如果不是，将输出发生问题的错误。
   /*
    * Process the response.
    */
   if (status == STAT_SUCCESS && response->errstat == SNMP_ERR_NOERROR) {
     /*
      * SUCCESS: Print the result variables
      */
   
Lets print the pdu's variable to the terminal using the print_variable routine:
让我们使用打印流程输出pdu的值到标准终端：
     for(vars = response->variables; vars; vars = vars->next_variable)
       print_variable(vars->name, vars->name_length, vars);

Then, for kicks, lets get the information and manipulate it ourselves (checking to make sure its the type we're expecting (a string) first):
然后，让我们获取并操作自己我们自己的信息。（检查确信第一个是我们期望的字符串属性）
     /* manipulate the information ourselves */
     for(vars = response->variables; vars; vars = vars->next_variable) {
       int count=1;
       if (vars->type == ASN_OCTET_STR) {
         char *sp = malloc(1 + vars->val_len);
         memcpy(sp, vars->val.string, vars->val_len);
         sp[vars->val_len] = '\0';
         printf("value #%d is a string: %s\n", count++, sp);
         free(sp);
       }
       else
         printf("value #%d is NOT a string! Ack!\n", count++);
     }

Finally, print a description of the error in case there was one:
最后打印描述错误信息。
   } else {
     /*
      * FAILURE: print what went wrong!
      */
    
     if (status == STAT_SUCCESS)
       fprintf(stderr, "Error in packet\nReason: %s\n",
               snmp_errstring(response->errstat));
     else
       snmp_sess_perror("snmpget", ss);
    
   }

Last, but not least, free the response, as it is now our job to do so. Exit cleanly by calling snmp_close() as well:
结尾，但不是最后的，释放response，他现在还承担这我们的任务。调用snmp_close清理连接。
   /*
    * Clean up:
    *  1) free the response.
    *  2) close the session.
    */
   if (response)
     snmp_free_pdu(response);
   snmp_close(ss);
    
   /* windows32 specific cleanup (is a noop on unix) */
   SOCK_CLEANUP;
   
 } /* main() */
   

       

       

       


   


   



